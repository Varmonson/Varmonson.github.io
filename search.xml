<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[数据结构-单链表的实现]]></title>
    <url>%2F2019%2F01%2F13%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;链表是一种常见的数据结构，链表一般分为单向链表、双向链表和循环链表。本篇主要介绍单链表的原理和使用kjava语言实现单链表结构以及对单链表的一些基本操作。以下是维基百科对单链表的一种定义：单向链表(又名单链表、线性链表)是链表的一种，其特点是链表的链接是单向的，对链表的访问要通过从头部开始，依序往下读取。 从图片中可以清晰的看出，单链表每个节点有两部分组成，一部分用来存放数据元素，被称为数据域(图中data部分)，另一部分是下一节点的地址，被称为指针域(图中next部分)。尾结点的指针域为null链表中的各个节点在内存中的地址不一定是连续的，所以我们要找到链表中的某一个节点，必须要通过它的前驱结点，根据它的前驱结点的指针域来找到某该节点的内存地址。下面看一下具体实现：1234567891011121314151617181920212223242526public class SingleLinkedList&lt;E&gt; &#123; private MyNode&lt;E&gt; first; // 首节点 int size = 0; // 链表容量 int modCount = 0; // 修改次数 /** * 无参构造 */ public SingleLinkedList()&#123; &#125; /** * 数据节点 * @param &lt;E&gt; */ private static class MyNode&lt;E&gt;&#123; E data; // 数据域 MyNode&lt;E&gt; next; // 指针域 MyNode(E element, MyNode&lt;E&gt; next)&#123; this.data = element; this.next = next; &#125; &#125;&#125;首先自定义了一个类来表示单链表，其中有三个属性，分别记录首节点的地址、链表的容量和修改的次数。首节点地址用来以后操作链表。链表内部有一个内部类用来表示链表的节点，每个节点由一个数据域和指针域构成。1.查找在上面介绍过，单链表的指针域是下一个节点的地址。那么我们要获取某一指定位置的节点，我们要从首部节点开始遍历，拿到第n-1个节点，然后获取当前节点的数据域，以下是示例代码：1234567891011121314151617181920/** * 获取第n个节点的元素 * @param index * @return */E getNode(int index)&#123; return myNode(index).data;&#125;// 获取某一指定节点MyNode&lt;E&gt; myNode(int index) &#123; if (index &lt; 0 || index &gt; size) return null; // 获取第n-1个节点的下一个节点 MyNode&lt;E&gt; x = first; for (int i = 0; i &lt;= index - 1; i++)&#123; x = x.next; &#125; return x;&#125;2.增加对于链表首部和链表尾部添加元素比较简单。在首部添加元素，只需要将添加的节点的指针域指向首部的数据域即可，如下:1234567891011121314151617/** * 在第一个节点之前添加节点 * @param e */void addFirst(E e)&#123; linkFirst(e);&#125;void linkFirst(E e)&#123; MyNode f = first; // 获取链表首部 MyNode newNode = new MyNode(e, f); // 把新节点的指针域指向原首部节点 first = newNode; // 把指针指向新节点 size++; // 链表容量+1 modCount++; // 记录修改次数&#125;在尾部添加节点，拿到首部节点，遍历到链表最后一位，在其后插入新节点即可，如下：1234567891011121314151617181920/** * 在最后一个节点之后添加 * @param e */public void addLast(E e)&#123; linkLast(e);&#125;void linkLast(E e)&#123; MyNode pointer = first; MyNode newNode = new MyNode&lt;&gt;(e, null); for (int i = 0; i &lt; size - 1; i++) if (pointer.next != null) pointer = pointer.next; pointer.next = newNode; size++; // 增加容量 modCount++; // 累加修改次数&#125;首部和尾部都比较好实现，那如果要向某一指定位置插入节点该如何实现呢？我们首先要获取某一指定节点的前驱结点(这里要用到刚刚查询指定位置节点的方法)，然后把前驱结点指向要插入的节点，再把插入的新节点指向原链表的当前节点，代码如下:123456789101112131415161718/** * 向第n个节点后插入节点 * @param index * @param e */void add(int index, E e)&#123; // 获取第n个节点 MyNode&lt;E&gt; modNode = myNode(index); // 获取第n个节点中的前驱结点 MyNode&lt;E&gt; preNode = myNode(index-1); // 把插入的节点指向当前元素 MyNode newNode = new MyNode(e, modNode); // 把原链表的前驱结点指向新节点 preNode.next = newNode; size++; modCount++;&#125;3.删除删除指定节点，要先获取当前节点的前驱节点和后驱节点，然后把前驱节点指向后驱节点即可，代码示例：1234567891011121314151617181920212223242526/** * 删除指定的节点 * @param index * @return */E remove(int index)&#123; // 要移出的元素 E element = getNode(index); // 获取当前节点的前驱结点 MyNode&lt;E&gt; prevNode = myNode(index - 1); // 获取当前节点的后驱节点 MyNode&lt;E&gt; nextNode = myNode(index + 1); // 判断前一个节点是否为null if (prevNode == null)&#123; first = nextNode; // 移出第一个节点 &#125; else &#123; // 把当前节点的前驱指向当前节点的后驱 prevNode.next = nextNode; &#125; size--; modCount++; // 返回当前节点的元素 return element;&#125;以上就是单链表的基本操作,相对还比较简单。 本文是学习过程中自己的一点总结，如有不当之处，欢迎批评指正。]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>java</tag>
        <tag>单链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一直在迷雾中找寻的人]]></title>
    <url>%2F2019%2F01%2F13%2F%E4%B8%80%E7%9B%B4%E5%9C%A8%E8%BF%B7%E9%9B%BE%E4%B8%AD%E6%89%BE%E5%AF%BB%E7%9A%84%E4%BA%BA%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;今天总算是把博客基本搭建好了。从说要搭建博客开始，已经一个月过去了，对于拖延症晚期的我，每个周末前都会做出很完美的计划，然后到了周末还是在床上躺尸。周而复始，所以一直都很辣鸡也是有原因的。 &emsp;&emsp;还记得一个月前，说要搞一个微信公众号，搞一个博客。然后去注册了一个公众号之后，刚想要搭博客，却懒得去看教程了，懒得去搞了，公众号也只是简单的注册完，然后一个月也没有写过文章。自己就是这么一个只会做一堆计划却没有执行力的一个屌丝而已。 &emsp;&emsp;工作三个月了，每天上班、下班、胡思乱想发呆。制定了一个又一个计划，执行的时间永远没有制定计划的时间长。每天下班回到家，想要学习的时候，对着电脑，看着书，不一会又去发呆了，再之后又不自觉地拿起了手机。有些人，终其一生也将碌碌无为是有原因的，每天看他的计划总是那么励志，实际上确实三分钟热度。 &emsp;&emsp;一直都想要去喜欢所有的东西，都想对很多事情保有热情，可是对一切却也无感。欺骗着自己说，我是喜欢这个的，我要去学习，然后每两天也就失去了热情。还记得刚开始实习的时候，朋友问我想找什么工作，我回答说，当然是程序猿了，不然又能做什么?是啊，不然又能做什么。从来也不知道自己喜欢什么，做程序猿也只是因为并不知道自己真正想要做什么工作，自己除了这个好像别的什么也做不了。在没有尝试过其他行业之前，就已经给自己定义好了一条路线:这只是我的工作，我并不一定要喜欢它，它只是确保我能生活下去而已。 &emsp;&emsp;很幸运，也很不幸，我是一个不是很理智的理智的人。去年年底在一家公司实习了两个月之后，受不了压力，年底就离职了。想着过年来了之后找找工作试试，找不到就去培训吧。结果来了之后就是去培训了。培训六个月，之前本身就有基础，加上培训学的只是皮毛，也不算吃力。然后出来找工作也还顺利。对于刚毕业的学生来说，应该还算可以了。在上海，每个月工资能够养活自己，还不能有一些剩余。毫无波澜，我就从一个大学生过渡到上班族，仿佛一切都来的理所当然，虽然才工作几个月，感觉却是一个混迹于职场的老江湖。 &emsp;&emsp;我想自己大概应该和多数人一个，应该是喜欢自由的。有多喜欢呢？不知道。很多人大概刚开始的时候也是想要去追求自由的，可是因为羽翼未丰，所以不得不屈于当下。可是在这过程中，一点点被同化，或者被一点点束缚，慢慢的也就没有那个心了吧。还记得第一次看《肖申克的救赎》的时候，在安迪冲出下水道的那一刻，整个心是沸腾的！那个时候是初三，对于自由并不很理解，只是觉得他是一个英雄。15年，对于现在的我也是不敢想象的一个时间概念，可是，对于有些人来说，15年还是15天又有什么关系呢？就像瑞德说的:“有一种鸟儿是永远也关不住的，因为它们的每片羽毛都闪着自由的光辉！”当瑞德在海岸边找到安迪的时候，心中又震颤了一下。是了，他们是两个自由的男人。 &emsp;&emsp;自己心中应该也是有那么一点什么东西在跳动的吧，所以才没有干脆就去堕落。有些东西既然还没有找到，那就让它继续跳动吧，细心呵护着它。说不定呢？在某一个日子里，它突然就破土而出了，一切也就云开雾名了吧.]]></content>
      <categories>
        <category>生活随感</category>
      </categories>
      <tags>
        <tag>随感</tag>
        <tag>生活</tag>
        <tag>追求</tag>
      </tags>
  </entry>
</search>
